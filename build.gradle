import java.security.MessageDigest

plugins {
    id 'java'
}

group = 'com.github.EchoInMirror.EIMTimeStretchers'
version = System.getenv('VERSION') ?: '0.0.0'

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group = 'com.github.EchoInMirror.EIMTimeStretchers'
    version = System.getenv('VERSION') ?: '0.0.0'

    tasks.withType(JavaCompile).each {
        it.options.compilerArgs.add('--enable-preview')
    }

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId project.group
                artifactId project.name
                version project.version
            }
        }
    }

    task downloadLibs(type: Copy) {
        downloadLib('-x86_64.dylib', 'macos')
        downloadLib('.dylib', 'macos')
        downloadLib('.dll', 'windows')
        downloadLib('.so', 'linux')
    }

    tasks.withType(JavaCompile) {
        dependsOn downloadLibs
    }
}

def downloadLib(String ext, String source) {
    def file = new File("$projectDir/$source/src/main/resources/eim-time-stretchers/libEIMTimeStretchers$ext")
    if (file.exists()) return
    file.parentFile.mkdirs()
    println("Downloading: libEIMTimeStretchers$ext")
    new FileOutputStream(file).withCloseable { out ->
        new URL("https://github.com/EchoInMirror/EIMTimeStretchers/releases/latest/download/libEIMTimeStretchers$ext")
                .withInputStream { input ->
                    out << input
                    // calc sha256 then write to .sha256 file
                    new File(file.absolutePath + '.sha256').withPrintWriter { writer ->
                        writer.print(sha256(file))
                    }
                }
    }
}

static def sha256(File file) {
    def messageDigest = MessageDigest.getInstance("SHA-256")
    new FileInputStream(file).withCloseable { input ->
        byte[] buffer = new byte[8192]
        int read
        while ((read = input.read(buffer)) != -1) {
            messageDigest.update(buffer, 0, read)
        }
    }
    return messageDigest.digest().collect { String.format("%02x", it) }.join()
}
